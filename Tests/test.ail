print("Hello, world!")

# Functions, variables, and loops test
func func_test() -> NullType: print("Hi!")

func oopify(prefix: String) -> String: prefix + "oop"

func join_test(elements: IterArray, separator: String) -> String
    mut var result: String = ""
    mut var _len: Integer = len(elements)

    for i = 0b to _len then
        result = result + elements[i]
        if i != _len - 1b then result = result + separator
    end
    return result
end

func map_test(f: Function, elements: IterArray) -> IterArray
    mut var new_elements: IterArray = []
    for i = 0b to len(elements) then
        push(new_elements, f(elements[i]))
    end

    return new_elements
end

for i = 0b to 5b then
    print(join_test(map_test(oopify, ["l", "sp"]), ", "))
end

#let range_1_10 = range(1b, 10b)
print(range_1_10)

print(range_1_10[0b:5b:1b])
print(range_1_10[5b:10b:1b])
print(range_1_10[0b:5b:1b][1b])

struct x [x: Integer, y: x_Struct|Integer]
print(x)

mut var y: x_Struct = x()

y.x = 100b
print(y)
y.y = x()
print(y)
y.y.x = 345689354098534098345098b
print(y)

del y
print(x_Struct)
del x
#print(x_Struct)

# Floats test
print(0.1f)
print(0.2f)
print(0.3f)
print(0.4f)
print(0.5f)
print(0.6f)
print(0.7f)
print(0.8f)
print(0.9f)
print(0.0f)

print(0.1h + 0.2h)
print(0.1f + 0.2f)
print(0.1d + 0.2d)

# Bitwise operations test
print(1b << 1b)
print(1b >> 1b)
print(200b | 100b)
print(200b & 100b)
print(200b ^ 100b)
print(255b)
print(~255b+1b)
print(~(~255b+1b)+1b)

print("TESTING")